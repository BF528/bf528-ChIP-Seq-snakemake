#!/usr/bin/env python3

import pandas


## Variables that represent samples
sample_csv 		= pandas.read_csv('sample_sheet.csv', index_col='name')
CONDITIONS 		= set(sample_csv['condition'].tolist())
REPS 			= set(sample_csv['replicate'].tolist())
SAMPLES_LIST 	        = expand('{condition}_{rep}', condition=CONDITIONS, rep=REPS)



rule all:
    input:
        'results/motif/homer_motifs.done'




rule make_tag_dir:
    conda: 'envs/homer_env.yml'

    input:
        bam     = 'results/bowtie_aligned/{sample}_sorted.bam'
        
    output:
        done    = touch('results/tagdirs/{sample}_make_tag_dir.done')

    params:
        outdir  = directory('results/tagdirs/{sample}_tag_dir')

    shell:
        '''
        makeTagDirectory {params.outdir} {input.bam} 
        '''


rule findPeaks:
    conda: 'envs/homer_env.yml'

    input:
        runx1_done          = 'results/tagdirs/RUNX1_{rep}_make_tag_dir.done',
        inp_done            = 'results/tagdirs/INP_{rep}_make_tag_dir.done'

    output:
        peaks               = 'results/tagdirs/RUNX1_{rep}_tag_dir/peaks.txt'

    params:
        tagdir              = 'results/tagdirs/RUNX1_{rep}_tag_dir',
        control_tagdir      = 'results/tagdirs/INP_{rep}_tag_dir'

    shell:
        '''
        findPeaks {params.tagdir} -style factor -o auto -i {params.control_tagdir}
        '''

rule convertPeakFiles:
    conda: 'envs/homer_env.yml'
    
    input:
        peaks       = 'results/tagdirs/RUNX1_{rep}_tag_dir/peaks.txt'

    output:
        bedfile     = 'results/RUNX1_{rep}.bed'

    shell:
        '''
        pos2bed.pl {input.peaks} > {output.bedfile}
        '''

rule intersect_peaks:
    conda: 'envs/bedtools_env.yml'

    input:
        rep1        = 'results/RUNX1_rep1.bed',
        rep2        = 'results/RUNX1_rep2.bed'

    output:
        intersect   = 'results/RUNX1.bed'

    # consider using -r flag
    shell:
        '''
        bedtools intersect -a {input.rep1} -b {input.rep2} > {output.intersect}
        '''

rule filter_blacklist:
    conda: 'envs/bedtools_env.yml'
    
    input:
        runx1               = 'results/RUNX1.bed',
        blacklist           = 'results/hg38-blacklist.v2.bed'

    output:
        intersect_filtered  = 'results/RUNX1_noBlacklist.bed'

    shell:
        '''
        bedtools intersect -a {input.runx1} -b {input.blacklist} -v > {output.intersect_filtered}
        '''

rule unzip_gtf:
    input:
        zipped      = 'results/gencode.v45.primary_assembly.annotation.gtf.gz'

    output:
        unzipped    = 'results/gencode.v45.primary_assembly.annotation.gtf' 

    shell:
        '''
        gzip -d {input.zipped}
        '''

rule unzip_genome:
    input:
        zipped      = 'results/GRCh38.primary_assembly.genome.fa.gz'
        
    output:
        unzipped    = 'results/GRCh38.primary_assembly.genome.fa'
        
    shell:
        '''
        gzip -d {input.zipped}
        '''



rule annotate_peaks:
    conda: 'envs/homer_env.yml'

    input:
        bed     = 'results/RUNX1_noBlacklist.bed',
        gtf     = 'results/gencode.v45.primary_assembly.annotation.gtf',
        genome  = 'results/GRCh38.primary_assembly.genome.fa'

    output:
        txt     = 'results/RUNX1_noBlacklist_annotated.txt'

    shell:
        '''
        annotatePeaks.pl {input.bed} {input.genome} -gtf {input.gtf} > {output.txt}
        '''

rule motifs:
    threads: 8
    conda: 'envs/homer_env.yml'

    input:
        peaks   = 'results/RUNX1_noBlacklist_annotated.txt',
        genome  = 'results/GRCh38.primary_assembly.genome.fa'

    output:
        touch('results/motif/homer_motifs.done')
    
    params:
        outdir  = 'results/motif'

    shell:
        #-mask
        '''
        findMotifsGenome.pl {input.peaks} {input.genome} {params.outdir} -size 200 -p {threads}
        '''





