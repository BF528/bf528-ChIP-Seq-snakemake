import pandas

sample_csv 		= pandas.read_csv('sample_sheet.csv', index_col='name')
CONDITIONS 		= set(sample_csv['condition'].tolist())
REPS 			= set(sample_csv['replicate'].tolist())
FULL_SAMPLES	= expand('samples/{condition}_{reps}.fastq.gz', condition = CONDITIONS, reps = REPS)

rule all:
	input:
		## RULE ALL FOR RULE 'fastqc'
		expand('results/qc/fastqc/{sample}_fastqc.html', sample = FULL_SAMPLES)

		## RULE ALL FOR RULE 'wget_files'
		# expand('samples/{sample}.fastq.gz', sample = FULL_SAMPLES)

rule wget_files:
	output:
		'samples/{condition}_{rep}.fastq.gz'
	params:
		link = lambda wildcards: sample_csv.loc['{}_{}'.format(wildcards.condition, wildcards.rep), 'ftp_link'],
		renamed = lambda wildcards: 'samples/{}_{}.fastq.gz'.format(wildcards.condition, wildcards.rep)
	shell:
		'''
		wget -O {params.renamed} {params.link} 
		'''
'''
rule bowtie2_build_gencode:
	input:
	output:
	params:
	threads: 16
	conda:
		'envs/bowtie2_env.yml'
	shell:
'''

rule fastqc:
	input: 
		'samples/{fastq}.fastq.gz'

	output:
		'results/qc/fastqc/{fastq}_fastqc.html',
		'results/qc/fastqc/{fastq}_fastqc.zip'

	conda:
		'envs/fastqc_env.yml'
	
	threads: 4
	shell:
		'''
		fastqc -o results/qc/fastqc {input} -t {threads}
		'''



'''
rule trimomatic:
	input:
	output:
	threads: 8
	conda:
		'envs/trimmomatic_env.yml'
	shell:
'''
